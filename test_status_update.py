#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test para verificar el problema de actualizaci√≥n de estado 'Solucionado'
Este script verifica si:
1. La funci√≥n insert_incident_action actualiza correctamente el estado
2. Los datos se guardan correctamente en la base de datos
3. El cache de Streamlit interfiere con la visualizaci√≥n
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.database_supabase import (
    get_supabase_connection, 
    insert_incident_action, 
    get_incident_record_details,
    get_dashboard_stats
)
import datetime

def test_status_update():
    """Prueba la actualizaci√≥n de estado paso a paso"""
    print("=== TEST DE ACTUALIZACI√ìN DE ESTADO ===")
    
    try:
        # 1. Conectar a la base de datos
        client = get_supabase_connection()
        print("‚úÖ Conexi√≥n a Supabase establecida")
        
        # 2. Obtener un registro de incidencia existente para probar
        records_result = client.table('incident_records').select('id, status').limit(5).execute()
        
        if not records_result.data:
            print("‚ùå No hay registros de incidencia para probar")
            return False
            
        test_record = records_result.data[0]
        record_id = test_record['id']
        original_status = test_record['status']
        
        print(f"üìã Registro de prueba: ID {record_id}, Estado original: {original_status}")
        
        # 3. Verificar estado antes de la actualizaci√≥n
        print("\n--- ANTES DE LA ACTUALIZACI√ìN ---")
        before_details = get_incident_record_details(record_id)
        print(f"Estado en get_incident_record_details: {before_details.get('status', 'N/A')}")
        
        # Verificar directamente en la base de datos
        direct_check = client.table('incident_records').select('status').eq('id', record_id).execute()
        if direct_check.data:
            print(f"Estado directo en BD: {direct_check.data[0]['status']}")
        
        # 4. Simular inserci√≥n de acci√≥n con cambio de estado a 'Solucionado'
        print("\n--- INSERTANDO ACCI√ìN CON ESTADO 'Solucionado' ---")
        
        action_date = datetime.date.today()
        action_description = "TEST: Cambio de estado a Solucionado"
        new_status = "Solucionado"
        performed_by = 1  # Asumiendo que existe un coordinador con ID 1
        
        # Llamar a la funci√≥n que deber√≠a actualizar el estado
        success = insert_incident_action(
            record_id, 
            action_date, 
            action_description, 
            new_status, 
            performed_by
        )
        
        if success:
            print("‚úÖ insert_incident_action retorn√≥ True")
        else:
            print("‚ùå insert_incident_action retorn√≥ False")
            return False
            
        # 5. Verificar estado despu√©s de la actualizaci√≥n
        print("\n--- DESPU√âS DE LA ACTUALIZACI√ìN ---")
        
        # Verificar directamente en la base de datos (sin cache)
        direct_check_after = client.table('incident_records').select('status').eq('id', record_id).execute()
        if direct_check_after.data:
            db_status = direct_check_after.data[0]['status']
            print(f"Estado directo en BD: {db_status}")
            
            if db_status == "Solucionado":
                print("‚úÖ El estado se actualiz√≥ correctamente en la base de datos")
            else:
                print(f"‚ùå El estado NO se actualiz√≥. Esperado: 'Solucionado', Actual: '{db_status}'")
                return False
        
        # Verificar con la funci√≥n de detalles (puede tener cache)
        after_details = get_incident_record_details(record_id)
        cached_status = after_details.get('status', 'N/A')
        print(f"Estado en get_incident_record_details (con cache): {cached_status}")
        
        # 6. Verificar que la acci√≥n se guard√≥ correctamente
        actions_result = client.table('incident_actions').select('*').eq('incident_record_id', record_id).order('action_date', desc=True).limit(1).execute()
        
        if actions_result.data:
            last_action = actions_result.data[0]
            print(f"\n--- √öLTIMA ACCI√ìN REGISTRADA ---")
            print(f"Descripci√≥n: {last_action['action_description']}")
            print(f"Nuevo estado: {last_action['new_status']}")
            print(f"Fecha: {last_action['action_date']}")
            
            if last_action['new_status'] == "Solucionado":
                print("‚úÖ La acci√≥n se guard√≥ correctamente")
            else:
                print(f"‚ùå La acci√≥n no tiene el estado correcto. Esperado: 'Solucionado', Actual: '{last_action['new_status']}'")
        
        # 7. Verificar estad√≠sticas del dashboard
        print("\n--- VERIFICANDO ESTAD√çSTICAS DEL DASHBOARD ---")
        stats = get_dashboard_stats()
        print(f"Total incidencias: {stats['total_incidents']}")
        print(f"Incidencias resueltas (Solucionado): {stats['resolved_incidents']}")
        print(f"Incidencias pendientes: {stats['pending_incidents']}")
        
        # Verificar conteo directo de 'Solucionado'
        solucionado_count = client.table('incident_records').select('count', count='exact').eq('status', 'Solucionado').execute()
        direct_count = solucionado_count.count if solucionado_count.count else 0
        print(f"Conteo directo de 'Solucionado' en BD: {direct_count}")
        
        if stats['resolved_incidents'] == direct_count:
            print("‚úÖ Las estad√≠sticas del dashboard coinciden con la BD")
        else:
            print(f"‚ùå Las estad√≠sticas NO coinciden. Dashboard: {stats['resolved_incidents']}, BD: {direct_count}")
            print("‚ö†Ô∏è  Esto puede indicar un problema de cache")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_cache_behavior():
    """Prueba espec√≠fica para verificar el comportamiento del cache"""
    print("\n=== TEST DE COMPORTAMIENTO DEL CACHE ===")
    
    try:
        # Limpiar cache de Streamlit si existe
        try:
            import streamlit as st
            st.cache_data.clear()
            print("‚úÖ Cache de Streamlit limpiado")
        except:
            print("‚ÑπÔ∏è  No se pudo limpiar el cache de Streamlit (normal en script standalone)")
        
        # Obtener estad√≠sticas m√∫ltiples veces
        print("\n--- OBTENIENDO ESTAD√çSTICAS M√öLTIPLES VECES ---")
        
        for i in range(3):
            stats = get_dashboard_stats()
            print(f"Intento {i+1}: Resueltas = {stats['resolved_incidents']}, Pendientes = {stats['pending_incidents']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de cache: {e}")
        return False

if __name__ == "__main__":
    print("Iniciando tests de actualizaci√≥n de estado...\n")
    
    # Ejecutar tests
    test1_result = test_status_update()
    test2_result = test_cache_behavior()
    
    print("\n=== RESUMEN DE RESULTADOS ===")
    print(f"Test de actualizaci√≥n de estado: {'‚úÖ PAS√ì' if test1_result else '‚ùå FALL√ì'}")
    print(f"Test de comportamiento de cache: {'‚úÖ PAS√ì' if test2_result else '‚ùå FALL√ì'}")
    
    if test1_result and test2_result:
        print("\nüéâ Todos los tests pasaron. El problema puede estar en la interfaz de usuario.")
    else:
        print("\n‚ö†Ô∏è  Se detectaron problemas. Revisar los logs anteriores.")