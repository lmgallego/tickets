#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para simular el comportamiento de navegaci√≥n de Streamlit
y diagnosticar problemas con los accesos r√°pidos del dashboard.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, patch
import streamlit as st

class MockSessionState:
    """Mock de st.session_state para simular el comportamiento de Streamlit"""
    def __init__(self):
        self._state = {}
    
    def __getitem__(self, key):
        return self._state.get(key)
    
    def __setitem__(self, key, value):
        self._state[key] = value
        print(f"üîÑ Estado actualizado: {key} = {value}")
    
    def __delitem__(self, key):
        if key in self._state:
            del self._state[key]
            print(f"üóëÔ∏è Estado eliminado: {key}")
    
    def get(self, key, default=None):
        return self._state.get(key, default)
    
    def __contains__(self, key):
        return key in self._state
    
    def clear_navigation_state(self):
        """Simula la limpieza del estado de navegaci√≥n"""
        nav_keys = ['navigate_to', 'navigate_to_actions', 'main_menu_override', 'sub_menu_override']
        for key in nav_keys:
            if key in self._state:
                del self._state[key]
                print(f"üóëÔ∏è Estado eliminado: {key}")

def test_dashboard_navigation():
    """Prueba la navegaci√≥n desde el dashboard"""
    print("\n=== PRUEBA DE NAVEGACI√ìN DESDE DASHBOARD ===")
    
    # Simular st.session_state
    mock_session_state = MockSessionState()
    
    with patch('streamlit.session_state', mock_session_state):
        # Importar despu√©s del patch para que use el mock
        from components.dashboard import handle_dashboard_navigation
        
        print("\n1Ô∏è‚É£ Estado inicial:")
        print(f"   navigate_to: {mock_session_state.get('navigate_to')}")
        
        print("\n2Ô∏è‚É£ Simulando clic en 'Exportar Excel':")
        mock_session_state['navigate_to'] = 'export'
        
        print("\n3Ô∏è‚É£ Verificando navegaci√≥n:")
        nav_result = handle_dashboard_navigation()
        print(f"   Resultado de navegaci√≥n: {nav_result}")
        
        print("\n4Ô∏è‚É£ Simulando l√≥gica de app.py:")
        if nav_result == 'export':
            mock_session_state['main_menu_override'] = 'Administraci√≥n'
            mock_session_state['sub_menu_override'] = 'Exportar a Excel'
            print("   ‚úÖ Navegaci√≥n configurada correctamente")
        
        print("\n5Ô∏è‚É£ Estado final:")
        print(f"   navigate_to: {mock_session_state.get('navigate_to')}")
        print(f"   main_menu_override: {mock_session_state.get('main_menu_override')}")
        print(f"   sub_menu_override: {mock_session_state.get('sub_menu_override')}")

def test_export_form_behavior():
    """Prueba el comportamiento del formulario de exportaci√≥n"""
    print("\n=== PRUEBA DE FORMULARIO DE EXPORTACI√ìN ===")
    
    mock_session_state = MockSessionState()
    mock_session_state['main_menu_override'] = 'Administraci√≥n'
    mock_session_state['sub_menu_override'] = 'Exportar a Excel'
    
    with patch('streamlit.session_state', mock_session_state):
        try:
            from components.delete import export_excel_form
            from utils.database_supabase import export_incidents_to_excel
            
            print("\n1Ô∏è‚É£ Probando exportaci√≥n de Excel:")
            filename = export_incidents_to_excel()
            print(f"   ‚úÖ Archivo generado: {filename}")
            
            # Verificar que el archivo existe
            if os.path.exists(filename):
                size = os.path.getsize(filename)
                print(f"   ‚úÖ Archivo verificado: {size:,} bytes")
            else:
                print(f"   ‚ùå Archivo no encontrado: {filename}")
            
            print("\n2Ô∏è‚É£ Estado despu√©s de exportaci√≥n:")
            print(f"   main_menu_override: {mock_session_state.get('main_menu_override')}")
            print(f"   sub_menu_override: {mock_session_state.get('sub_menu_override')}")
            
        except Exception as e:
            print(f"   ‚ùå Error en exportaci√≥n: {e}")
            import traceback
            traceback.print_exc()

def test_all_quick_access_points():
    """Prueba todos los puntos de acceso r√°pido"""
    print("\n=== PRUEBA DE TODOS LOS ACCESOS R√ÅPIDOS ===")
    
    quick_access_points = {
        'new_incident_record': ('Registros', 'Nuevo Registro'),
        'new_incident_code': ('C√≥digos', 'Nuevo C√≥digo'),
        'manage_actions': ('Registros', 'Gesti√≥n de Acciones'),
        'analytics': ('Anal√≠tica', 'Completa'),
        'export': ('Administraci√≥n', 'Exportar a Excel')
    }
    
    mock_session_state = MockSessionState()
    
    with patch('streamlit.session_state', mock_session_state):
        from components.dashboard import handle_dashboard_navigation
        
        for nav_key, expected_menu in quick_access_points.items():
            print(f"\nüîç Probando: {nav_key}")
            
            # Limpiar estado
            mock_session_state.clear_navigation_state()
            
            # Simular navegaci√≥n
            mock_session_state['navigate_to'] = nav_key
            
            # Verificar navegaci√≥n
            result = handle_dashboard_navigation()
            
            if result == nav_key:
                print(f"   ‚úÖ Navegaci√≥n exitosa: {nav_key}")
                print(f"   üìç Men√∫ esperado: {expected_menu[0]} -> {expected_menu[1]}")
            else:
                print(f"   ‚ùå Navegaci√≥n fallida: esperado {nav_key}, obtenido {result}")

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DE NAVEGACI√ìN")
    
    try:
        test_dashboard_navigation()
        test_export_form_behavior()
        test_all_quick_access_points()
        
        print("\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS")
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN PRUEBAS: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüìã RECOMENDACIONES:")
    print("1. Verificar que no hay conflictos de estado en la interfaz web")
    print("2. Comprobar que los keys √∫nicos evitan problemas de renderizado")
    print("3. El delay agregado deber√≠a mejorar la estabilidad")
    print("4. Probar desde la interfaz web para confirmar la correcci√≥n")